import 'dart:html';
import 'package:manim_web/display/abstract_html_display.dart';
import 'package:gmm/gmm.dart';
import 'package:manim_web/manim.dart';

void main() {
  SingleStringMathTex.texToSVGMap[r'''align*'''] = {};

  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''\gets'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='9.962669pt' height='2.328761pt' viewBox='166.874206 -3.655041 9.962669 2.328761'>
  <defs>
  <path id='g0-32' d='M9.39477-2.49066C9.39477-2.590286 9.325031-2.689913 9.185554-2.689913H1.643836C2.391034-3.227895 2.909091-4.044832 3.068493-4.961395C3.068493-5.041096 3.01868-5.090909 2.958904-5.090909H2.779577C2.729763-5.090909 2.67995-5.051059 2.669988-5.001245C2.480697-3.88543 1.693649-2.968867 .627646-2.590286C.587796-2.580324 .547945-2.540473 .547945-2.49066S.587796-2.400996 .627646-2.391034C1.693649-2.012453 2.480697-1.09589 2.669988 .019925C2.67995 .069738 2.729763 .109589 2.779577 .109589H2.958904C3.01868 .109589 3.068493 .059776 3.068493-.019925C2.909091-.936488 2.391034-1.753425 1.643836-2.291407H9.185554C9.325031-2.291407 9.39477-2.391034 9.39477-2.49066Z'/>
  </defs>
  <g id='page1'>
  <use x='166.874206' y='0' xlink:href='#g0-32'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''\to'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='9.962669pt' height='2.328761pt' viewBox='166.874206 -3.655041 9.962669 2.328761'>
  <defs>
  <path id='g0-33' d='M9.39477-2.49066C9.39477-2.540473 9.354919-2.580324 9.315068-2.590286C8.249066-2.968867 7.462017-3.88543 7.272727-5.001245C7.262765-5.051059 7.212951-5.090909 7.163138-5.090909H6.983811C6.924035-5.090909 6.874222-5.041096 6.874222-4.961395C7.033624-4.044832 7.551681-3.227895 8.298879-2.689913H.757161C.617684-2.689913 .547945-2.590286 .547945-2.49066S.617684-2.291407 .757161-2.291407H8.298879C7.551681-1.753425 7.033624-.936488 6.874222-.019925C6.874222 .059776 6.924035 .109589 6.983811 .109589H7.163138C7.212951 .109589 7.262765 .069738 7.272727 .019925C7.462017-1.09589 8.249066-2.012453 9.315068-2.391034C9.354919-2.400996 9.39477-2.440847 9.39477-2.49066Z'/>
  </defs>
  <g id='page1'>
  <use x='166.874206' y='0' xlink:href='#g0-33'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![
          r'''\textnormal{Means} \hspace{0.1cm} \mu:'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='42.378966pt' height='8.800198pt' viewBox='150.666066 -6.863016 42.378966 8.800198'>
  <defs>
  <path id='g1-58' d='M1.912827-3.765878C1.912827-4.054795 1.673724-4.293898 1.384807-4.293898S.856787-4.054795 .856787-3.765878S1.09589-3.237858 1.384807-3.237858S1.912827-3.476961 1.912827-3.765878ZM1.912827-.52802C1.912827-.816936 1.673724-1.05604 1.384807-1.05604S.856787-.816936 .856787-.52802S1.09589 0 1.384807 0S1.912827-.239103 1.912827-.52802Z'/>
  <path id='g0-22' d='M5.69863-1.424658C5.69863-1.524284 5.608966-1.524284 5.579078-1.524284C5.479452-1.524284 5.469489-1.484433 5.439601-1.344956C5.270237-.697385 5.090909-.109589 4.682441-.109589C4.41345-.109589 4.383562-.368618 4.383562-.56787C4.383562-.787049 4.503113-1.255293 4.582814-1.603985L4.861768-2.67995C4.891656-2.82939 4.991283-3.20797 5.031133-3.35741C5.080946-3.58655 5.180573-3.965131 5.180573-4.024907C5.180573-4.204234 5.041096-4.293898 4.891656-4.293898C4.841843-4.293898 4.582814-4.283935 4.503113-3.945205L4.034869-2.082192L3.775841-1.066002C3.765878-1.016189 3.287671-.109589 2.480697-.109589C1.982565-.109589 1.743462-.438356 1.743462-.976339C1.743462-1.265255 1.8132-1.544209 1.882939-1.823163L2.30137-3.496887C2.351183-3.706102 2.450809-4.084682 2.450809-4.134496C2.450809-4.303861 2.331258-4.403487 2.161893-4.403487C2.132005-4.403487 1.853051-4.393524 1.763387-4.044832L.328767 1.723537C.298879 1.843088 .298879 1.882939 .298879 1.882939C.298879 2.032379 .408468 2.15193 .577833 2.15193C.787049 2.15193 .9066 1.972603 .926526 1.942715C.966376 1.853051 1.09589 1.334994 1.474471-.199253C1.793275 .069738 2.241594 .109589 2.440847 .109589C3.138232 .109589 3.526775-.33873 3.765878-.617684C3.855542-.169365 4.224159 .109589 4.662516 .109589C5.011208 .109589 5.240349-.119552 5.399751-.438356C5.569116-.797011 5.69863-1.424658 5.69863-1.424658Z'/>
  <path id='g2-77' d='M8.757161 0V-.308842H8.518057C7.750934-.308842 7.731009-.418431 7.731009-.777086V-6.027397C7.731009-6.386052 7.750934-6.495641 8.518057-6.495641H8.757161V-6.804483H7.073474C6.814446-6.804483 6.814446-6.794521 6.744707-6.615193L4.562889-1.006227L2.400996-6.585305C2.311333-6.804483 2.281445-6.804483 2.052304-6.804483H.368618V-6.495641H.607721C1.374844-6.495641 1.39477-6.386052 1.39477-6.027397V-1.046077C1.39477-.777086 1.39477-.308842 .368618-.308842V0L1.534247-.029888L2.699875 0V-.308842C1.673724-.308842 1.673724-.777086 1.673724-1.046077V-6.41594H1.683686L4.084682-.219178C4.134496-.089664 4.184309 0 4.283935 0C4.393524 0 4.423412-.079701 4.463263-.18929L6.914072-6.495641H6.924035V-.777086C6.924035-.418431 6.90411-.308842 6.136986-.308842H5.897883V0C6.266501-.029888 6.94396-.029888 7.332503-.029888S8.388543-.029888 8.757161 0Z'/>
  <path id='g2-97' d='M4.811955-.886675V-1.444583H4.562889V-.886675C4.562889-.308842 4.313823-.249066 4.204234-.249066C3.875467-.249066 3.835616-.697385 3.835616-.747198V-2.739726C3.835616-3.158157 3.835616-3.5467 3.476961-3.915318C3.088418-4.303861 2.590286-4.463263 2.11208-4.463263C1.295143-4.463263 .607721-3.995019 .607721-3.337484C.607721-3.038605 .806974-2.86924 1.066002-2.86924C1.344956-2.86924 1.524284-3.068493 1.524284-3.327522C1.524284-3.447073 1.474471-3.775841 1.016189-3.785803C1.285181-4.134496 1.77335-4.244085 2.092154-4.244085C2.580324-4.244085 3.148194-3.855542 3.148194-2.968867V-2.600249C2.6401-2.570361 1.942715-2.540473 1.315068-2.241594C.56787-1.902864 .318804-1.384807 .318804-.946451C.318804-.139477 1.285181 .109589 1.912827 .109589C2.570361 .109589 3.028643-.288917 3.217933-.757161C3.257783-.358655 3.526775 .059776 3.995019 .059776C4.204234 .059776 4.811955-.079701 4.811955-.886675ZM3.148194-1.39477C3.148194-.448319 2.430884-.109589 1.982565-.109589C1.494396-.109589 1.085928-.458281 1.085928-.956413C1.085928-1.504359 1.504359-2.331258 3.148194-2.391034V-1.39477Z'/>
  <path id='g2-101' d='M4.134496-1.185554C4.134496-1.285181 4.054795-1.305106 4.004981-1.305106C3.915318-1.305106 3.895392-1.24533 3.875467-1.165629C3.526775-.139477 2.630137-.139477 2.530511-.139477C2.032379-.139477 1.633873-.438356 1.404732-.806974C1.105853-1.285181 1.105853-1.942715 1.105853-2.30137H3.88543C4.104608-2.30137 4.134496-2.30137 4.134496-2.510585C4.134496-3.496887 3.596513-4.463263 2.351183-4.463263C1.195517-4.463263 .278954-3.437111 .278954-2.191781C.278954-.856787 1.325031 .109589 2.470735 .109589C3.686177 .109589 4.134496-.996264 4.134496-1.185554ZM3.476961-2.510585H1.115816C1.175592-3.995019 2.012453-4.244085 2.351183-4.244085C3.377335-4.244085 3.476961-2.899128 3.476961-2.510585Z'/>
  <path id='g2-110' d='M5.330012 0V-.308842C4.811955-.308842 4.562889-.308842 4.552927-.607721V-2.510585C4.552927-3.367372 4.552927-3.676214 4.244085-4.034869C4.104608-4.204234 3.775841-4.403487 3.198007-4.403487C2.470735-4.403487 2.002491-3.975093 1.723537-3.35741V-4.403487L.318804-4.293898V-3.985056C1.016189-3.985056 1.09589-3.915318 1.09589-3.427148V-.757161C1.09589-.308842 .986301-.308842 .318804-.308842V0L1.444583-.029888L2.560399 0V-.308842C1.892902-.308842 1.783313-.308842 1.783313-.757161V-2.590286C1.783313-3.626401 2.49066-4.184309 3.128269-4.184309C3.755915-4.184309 3.865504-3.646326 3.865504-3.078456V-.757161C3.865504-.308842 3.755915-.308842 3.088418-.308842V0L4.214197-.029888L5.330012 0Z'/>
  <path id='g2-115' d='M3.58655-1.275218C3.58655-1.803238 3.287671-2.102117 3.16812-2.221669C2.839352-2.540473 2.450809-2.620174 2.032379-2.699875C1.474471-2.809465 .806974-2.938979 .806974-3.516812C.806974-3.865504 1.066002-4.273973 1.92279-4.273973C3.01868-4.273973 3.068493-3.377335 3.088418-3.068493C3.098381-2.978829 3.20797-2.978829 3.20797-2.978829C3.337484-2.978829 3.337484-3.028643 3.337484-3.217933V-4.224159C3.337484-4.393524 3.337484-4.463263 3.227895-4.463263C3.178082-4.463263 3.158157-4.463263 3.028643-4.343711C2.998755-4.303861 2.899128-4.214197 2.859278-4.184309C2.480697-4.463263 2.072229-4.463263 1.92279-4.463263C.707347-4.463263 .328767-3.795766 .328767-3.237858C.328767-2.889166 .488169-2.610212 .757161-2.391034C1.075965-2.132005 1.354919-2.072229 2.072229-1.932752C2.291407-1.892902 3.108344-1.733499 3.108344-1.016189C3.108344-.508095 2.759651-.109589 1.982565-.109589C1.145704-.109589 .787049-.67746 .597758-1.524284C.56787-1.653798 .557908-1.693649 .458281-1.693649C.328767-1.693649 .328767-1.62391 .328767-1.444583V-.129514C.328767 .039851 .328767 .109589 .438356 .109589C.488169 .109589 .498132 .099626 .687422-.089664C.707347-.109589 .707347-.129514 .886675-.318804C1.325031 .099626 1.77335 .109589 1.982565 .109589C3.128269 .109589 3.58655-.557908 3.58655-1.275218Z'/>
  </defs>
  <g id='page1'>
  <use x='150.666066' y='0' xlink:href='#g2-77'/>
  <use x='159.798822' y='0' xlink:href='#g2-101'/>
  <use x='164.226721' y='0' xlink:href='#g2-97'/>
  <use x='169.208041' y='0' xlink:href='#g2-110'/>
  <use x='174.742782' y='0' xlink:href='#g2-115'/>
  <use x='181.507336' y='0' xlink:href='#g0-22'/>
  <use x='190.277653' y='0' xlink:href='#g1-58'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![
          r'''\textnormal{Variances} \hspace{0.1cm} \sigma^2:'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='61.313318pt' height='8.607647pt' viewBox='141.198882 -8.607647 61.313318 8.607647'>
  <defs>
  <path id='g0-27' d='M5.648817-4.054795C5.648817-4.293898 5.439601-4.293898 5.260274-4.293898H2.988792C1.484433-4.293898 .37858-2.650062 .37858-1.464508C.37858-.587796 .966376 .109589 1.872976 .109589C3.048568 .109589 4.373599-1.09589 4.373599-2.630137C4.373599-2.799502 4.373599-3.277709 4.064757-3.716065H5.160648C5.290162-3.716065 5.648817-3.716065 5.648817-4.054795ZM3.73599-2.749689C3.73599-2.281445 3.536737-1.464508 3.198007-.956413C2.809465-.368618 2.271482-.109589 1.882939-.109589C1.39477-.109589 .996264-.468244 .996264-1.185554C.996264-1.484433 1.115816-2.30137 1.464508-2.889166C1.882939-3.576588 2.480697-3.716065 2.819427-3.716065C3.656289-3.716065 3.73599-3.058531 3.73599-2.749689Z'/>
  <path id='g2-58' d='M1.912827-3.765878C1.912827-4.054795 1.673724-4.293898 1.384807-4.293898S.856787-4.054795 .856787-3.765878S1.09589-3.237858 1.384807-3.237858S1.912827-3.476961 1.912827-3.765878ZM1.912827-.52802C1.912827-.816936 1.673724-1.05604 1.384807-1.05604S.856787-.816936 .856787-.52802S1.09589 0 1.384807 0S1.912827-.239103 1.912827-.52802Z'/>
  <path id='g1-50' d='M3.521793-1.26924H3.284682C3.263761-1.115816 3.194022-.704359 3.103362-.63462C3.047572-.592777 2.510585-.592777 2.412951-.592777H1.129763C1.862017-1.241345 2.106102-1.436613 2.524533-1.764384C3.040598-2.175841 3.521793-2.608219 3.521793-3.270735C3.521793-4.11457 2.782565-4.630635 1.889913-4.630635C1.025156-4.630635 .439352-4.02391 .439352-3.382316C.439352-3.02665 .739228-2.991781 .808966-2.991781C.976339-2.991781 1.17858-3.110336 1.17858-3.361395C1.17858-3.486924 1.129763-3.731009 .767123-3.731009C.983313-4.226152 1.457534-4.379577 1.785305-4.379577C2.48269-4.379577 2.84533-3.835616 2.84533-3.270735C2.84533-2.66401 2.412951-2.182814 2.189788-1.931756L.509091-.27198C.439352-.209215 .439352-.195268 .439352 0H3.312578L3.521793-1.26924Z'/>
  <path id='g3-86' d='M7.272727-6.495641V-6.804483C6.963885-6.784558 6.56538-6.774595 6.306351-6.774595L5.17061-6.804483V-6.495641C5.688667-6.485679 5.897883-6.22665 5.897883-5.997509C5.897883-5.917808 5.867995-5.858032 5.84807-5.798257L4.024907-.996264L2.122042-6.027397C2.062267-6.166874 2.062267-6.206725 2.062267-6.206725C2.062267-6.495641 2.630137-6.495641 2.879203-6.495641V-6.804483C2.520548-6.774595 1.833126-6.774595 1.454545-6.774595L.18929-6.804483V-6.495641C.836862-6.495641 1.026152-6.495641 1.165629-6.117061L3.476961 0C3.5467 .18929 3.596513 .219178 3.726027 .219178C3.895392 .219178 3.915318 .169365 3.965131 .029888L6.1868-5.828144C6.326276-6.196762 6.595268-6.485679 7.272727-6.495641Z'/>
  <path id='g3-97' d='M4.811955-.886675V-1.444583H4.562889V-.886675C4.562889-.308842 4.313823-.249066 4.204234-.249066C3.875467-.249066 3.835616-.697385 3.835616-.747198V-2.739726C3.835616-3.158157 3.835616-3.5467 3.476961-3.915318C3.088418-4.303861 2.590286-4.463263 2.11208-4.463263C1.295143-4.463263 .607721-3.995019 .607721-3.337484C.607721-3.038605 .806974-2.86924 1.066002-2.86924C1.344956-2.86924 1.524284-3.068493 1.524284-3.327522C1.524284-3.447073 1.474471-3.775841 1.016189-3.785803C1.285181-4.134496 1.77335-4.244085 2.092154-4.244085C2.580324-4.244085 3.148194-3.855542 3.148194-2.968867V-2.600249C2.6401-2.570361 1.942715-2.540473 1.315068-2.241594C.56787-1.902864 .318804-1.384807 .318804-.946451C.318804-.139477 1.285181 .109589 1.912827 .109589C2.570361 .109589 3.028643-.288917 3.217933-.757161C3.257783-.358655 3.526775 .059776 3.995019 .059776C4.204234 .059776 4.811955-.079701 4.811955-.886675ZM3.148194-1.39477C3.148194-.448319 2.430884-.109589 1.982565-.109589C1.494396-.109589 1.085928-.458281 1.085928-.956413C1.085928-1.504359 1.504359-2.331258 3.148194-2.391034V-1.39477Z'/>
  <path id='g3-99' d='M4.134496-1.185554C4.134496-1.285181 4.034869-1.285181 4.004981-1.285181C3.915318-1.285181 3.895392-1.24533 3.875467-1.185554C3.58655-.259029 2.938979-.139477 2.570361-.139477C2.042341-.139477 1.165629-.56787 1.165629-2.171856C1.165629-3.795766 1.982565-4.214197 2.510585-4.214197C2.600249-4.214197 3.227895-4.204234 3.576588-3.845579C3.16812-3.815691 3.108344-3.516812 3.108344-3.387298C3.108344-3.128269 3.287671-2.929016 3.566625-2.929016C3.825654-2.929016 4.024907-3.098381 4.024907-3.39726C4.024907-4.07472 3.267746-4.463263 2.500623-4.463263C1.255293-4.463263 .33873-3.387298 .33873-2.15193C.33873-.876712 1.325031 .109589 2.480697 .109589C3.815691 .109589 4.134496-1.085928 4.134496-1.185554Z'/>
  <path id='g3-101' d='M4.134496-1.185554C4.134496-1.285181 4.054795-1.305106 4.004981-1.305106C3.915318-1.305106 3.895392-1.24533 3.875467-1.165629C3.526775-.139477 2.630137-.139477 2.530511-.139477C2.032379-.139477 1.633873-.438356 1.404732-.806974C1.105853-1.285181 1.105853-1.942715 1.105853-2.30137H3.88543C4.104608-2.30137 4.134496-2.30137 4.134496-2.510585C4.134496-3.496887 3.596513-4.463263 2.351183-4.463263C1.195517-4.463263 .278954-3.437111 .278954-2.191781C.278954-.856787 1.325031 .109589 2.470735 .109589C3.686177 .109589 4.134496-.996264 4.134496-1.185554ZM3.476961-2.510585H1.115816C1.175592-3.995019 2.012453-4.244085 2.351183-4.244085C3.377335-4.244085 3.476961-2.899128 3.476961-2.510585Z'/>
  <path id='g3-105' d='M2.460772 0V-.308842C1.803238-.308842 1.763387-.358655 1.763387-.747198V-4.403487L.368618-4.293898V-3.985056C1.016189-3.985056 1.105853-3.92528 1.105853-3.437111V-.757161C1.105853-.308842 .996264-.308842 .328767-.308842V0L1.424658-.029888C1.77335-.029888 2.122042-.009963 2.460772 0ZM1.912827-6.017435C1.912827-6.286426 1.683686-6.545455 1.384807-6.545455C1.046077-6.545455 .846824-6.266501 .846824-6.017435C.846824-5.748443 1.075965-5.489415 1.374844-5.489415C1.713574-5.489415 1.912827-5.768369 1.912827-6.017435Z'/>
  <path id='g3-110' d='M5.330012 0V-.308842C4.811955-.308842 4.562889-.308842 4.552927-.607721V-2.510585C4.552927-3.367372 4.552927-3.676214 4.244085-4.034869C4.104608-4.204234 3.775841-4.403487 3.198007-4.403487C2.470735-4.403487 2.002491-3.975093 1.723537-3.35741V-4.403487L.318804-4.293898V-3.985056C1.016189-3.985056 1.09589-3.915318 1.09589-3.427148V-.757161C1.09589-.308842 .986301-.308842 .318804-.308842V0L1.444583-.029888L2.560399 0V-.308842C1.892902-.308842 1.783313-.308842 1.783313-.757161V-2.590286C1.783313-3.626401 2.49066-4.184309 3.128269-4.184309C3.755915-4.184309 3.865504-3.646326 3.865504-3.078456V-.757161C3.865504-.308842 3.755915-.308842 3.088418-.308842V0L4.214197-.029888L5.330012 0Z'/>
  <path id='g3-114' d='M3.626401-3.795766C3.626401-4.11457 3.317559-4.403487 2.889166-4.403487C2.161893-4.403487 1.803238-3.73599 1.663761-3.307597V-4.403487L.278954-4.293898V-3.985056C.976339-3.985056 1.05604-3.915318 1.05604-3.427148V-.757161C1.05604-.308842 .946451-.308842 .278954-.308842V0L1.414695-.029888C1.8132-.029888 2.281445-.029888 2.67995 0V-.308842H2.470735C1.733499-.308842 1.713574-.418431 1.713574-.777086V-2.311333C1.713574-3.297634 2.132005-4.184309 2.889166-4.184309C2.958904-4.184309 2.978829-4.184309 2.998755-4.174346C2.968867-4.164384 2.769614-4.044832 2.769614-3.785803C2.769614-3.506849 2.978829-3.35741 3.198007-3.35741C3.377335-3.35741 3.626401-3.476961 3.626401-3.795766Z'/>
  <path id='g3-115' d='M3.58655-1.275218C3.58655-1.803238 3.287671-2.102117 3.16812-2.221669C2.839352-2.540473 2.450809-2.620174 2.032379-2.699875C1.474471-2.809465 .806974-2.938979 .806974-3.516812C.806974-3.865504 1.066002-4.273973 1.92279-4.273973C3.01868-4.273973 3.068493-3.377335 3.088418-3.068493C3.098381-2.978829 3.20797-2.978829 3.20797-2.978829C3.337484-2.978829 3.337484-3.028643 3.337484-3.217933V-4.224159C3.337484-4.393524 3.337484-4.463263 3.227895-4.463263C3.178082-4.463263 3.158157-4.463263 3.028643-4.343711C2.998755-4.303861 2.899128-4.214197 2.859278-4.184309C2.480697-4.463263 2.072229-4.463263 1.92279-4.463263C.707347-4.463263 .328767-3.795766 .328767-3.237858C.328767-2.889166 .488169-2.610212 .757161-2.391034C1.075965-2.132005 1.354919-2.072229 2.072229-1.932752C2.291407-1.892902 3.108344-1.733499 3.108344-1.016189C3.108344-.508095 2.759651-.109589 1.982565-.109589C1.145704-.109589 .787049-.67746 .597758-1.524284C.56787-1.653798 .557908-1.693649 .458281-1.693649C.328767-1.693649 .328767-1.62391 .328767-1.444583V-.129514C.328767 .039851 .328767 .109589 .438356 .109589C.488169 .109589 .498132 .099626 .687422-.089664C.707347-.109589 .707347-.129514 .886675-.318804C1.325031 .099626 1.77335 .109589 1.982565 .109589C3.128269 .109589 3.58655-.557908 3.58655-1.275218Z'/>
  </defs>
  <g id='page1'>
  <use x='141.198882' y='0' xlink:href='#g3-86'/>
  <use x='148.670863' y='0' xlink:href='#g3-97'/>
  <use x='153.652183' y='0' xlink:href='#g3-114'/>
  <use x='157.554224' y='0' xlink:href='#g3-105'/>
  <use x='160.321604' y='0' xlink:href='#g3-97'/>
  <use x='165.302924' y='0' xlink:href='#g3-110'/>
  <use x='170.837665' y='0' xlink:href='#g3-99'/>
  <use x='175.265564' y='0' xlink:href='#g3-101'/>
  <use x='179.693463' y='0' xlink:href='#g3-115'/>
  <use x='186.458024' y='0' xlink:href='#g0-27'/>
  <use x='192.508256' y='-4.113496' xlink:href='#g1-50'/>
  <use x='199.744821' y='0' xlink:href='#g2-58'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''N_{components}:'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='57.038879pt' height='9.658204pt' viewBox='143.336101 -6.807795 57.038879 9.658204'>
  <defs>
  <path id='g2-58' d='M1.912827-3.765878C1.912827-4.054795 1.673724-4.293898 1.384807-4.293898S.856787-4.054795 .856787-3.765878S1.09589-3.237858 1.384807-3.237858S1.912827-3.476961 1.912827-3.765878ZM1.912827-.52802C1.912827-.816936 1.673724-1.05604 1.384807-1.05604S.856787-.816936 .856787-.52802S1.09589 0 1.384807 0S1.912827-.239103 1.912827-.52802Z'/>
  <path id='g0-99' d='M3.452055-.718306C3.452055-.760149 3.38929-.836862 3.333499-.836862C3.291656-.836862 3.277709-.822914 3.221918-.767123C2.677958-.125529 1.862017-.125529 1.736488-.125529C1.234371-.125529 1.011208-.467248 1.011208-.899626C1.011208-1.101868 1.108842-1.862017 1.471482-2.343213C1.736488-2.684932 2.099128-2.880199 2.447821-2.880199C2.545455-2.880199 2.880199-2.866252 3.054545-2.670984C2.803487-2.629141 2.698879-2.433873 2.698879-2.280448C2.698879-2.092154 2.84533-2.022416 2.970859-2.022416C3.124284-2.022416 3.368369-2.133998 3.368369-2.468742C3.368369-2.942964 2.824408-3.075467 2.447821-3.075467C1.401743-3.075467 .432379-2.113076 .432379-1.143711C.432379-.54396 .850809 .069738 1.72254 .069738C2.901121 .069738 3.452055-.620672 3.452055-.718306Z'/>
  <path id='g0-101' d='M3.452055-.718306C3.452055-.760149 3.38929-.836862 3.333499-.836862C3.291656-.836862 3.277709-.822914 3.221918-.767123C2.677958-.125529 1.862017-.125529 1.736488-.125529C1.318057-.125529 1.039103-.404483 1.039103-.969365C1.039103-1.066999 1.039103-1.206476 1.12279-1.590037H1.562142C1.75741-1.590037 2.308344-1.603985 2.684932-1.736488C3.200996-1.917808 3.29863-2.252553 3.29863-2.461768C3.29863-2.84533 2.915068-3.075467 2.433873-3.075467C1.597011-3.075467 .467248-2.433873 .467248-1.241345C.467248-.536986 .9066 .069738 1.72254 .069738C2.901121 .069738 3.452055-.620672 3.452055-.718306ZM2.998755-2.461768C2.998755-1.785305 1.820174-1.785305 1.520299-1.785305H1.17858C1.464508-2.796513 2.238605-2.880199 2.433873-2.880199C2.740722-2.880199 2.998755-2.726775 2.998755-2.461768Z'/>
  <path id='g0-109' d='M6.729763-.99726C6.729763-1.08792 6.639103-1.08792 6.618182-1.08792C6.520548-1.08792 6.513574-1.046077 6.485679-.969365C6.32528-.411457 6.025405-.125529 5.746451-.125529C5.6-.125529 5.572105-.223163 5.572105-.369614C5.572105-.530012 5.606974-.620672 5.732503-.934496C5.816189-1.150685 6.102117-1.889913 6.102117-2.280448C6.102117-2.39203 6.102117-2.684932 5.844085-2.887173C5.725529-2.977833 5.523288-3.075467 5.195517-3.075467C4.56787-3.075467 4.184309-2.66401 3.961146-2.371108C3.905355-2.963885 3.410212-3.075467 3.054545-3.075467C2.475716-3.075467 2.085181-2.719801 1.875965-2.440847C1.827148-2.922042 1.415691-3.075467 1.129763-3.075467C.829888-3.075467 .669489-2.859278 .578829-2.698879C.425405-2.440847 .327771-2.043337 .327771-2.008468C.327771-1.917808 .425405-1.917808 .446326-1.917808C.54396-1.917808 .550934-1.93873 .599751-2.127024C.704359-2.538481 .836862-2.880199 1.108842-2.880199C1.290162-2.880199 1.338979-2.726775 1.338979-2.538481C1.338979-2.405978 1.276214-2.147945 1.227397-1.959651L1.073973-1.332005L.850809-.439352C.822914-.348692 .781071-.174346 .781071-.153425C.781071 0 .9066 .069738 1.018182 .069738C1.143711 .069738 1.255293-.020922 1.290162-.083686S1.380822-.369614 1.415691-.516065L1.569116-1.143711C1.610959-1.297136 1.652802-1.45056 1.687671-1.610959C1.764384-1.896887 1.778331-1.952677 1.980573-2.238605C2.175841-2.517559 2.503611-2.880199 3.02665-2.880199C3.431133-2.880199 3.438107-2.524533 3.438107-2.39203C3.438107-2.217684 3.417186-2.127024 3.319552-1.736488L3.02665-.564882C2.991781-.425405 2.929016-.188294 2.929016-.153425C2.929016 0 3.054545 .069738 3.166127 .069738C3.291656 .069738 3.403238-.020922 3.438107-.083686S3.528767-.369614 3.563636-.516065L3.717061-1.143711C3.758904-1.297136 3.800747-1.45056 3.835616-1.610959C3.912329-1.910834 3.912329-1.924782 4.051806-2.140971C4.274969-2.48269 4.623661-2.880199 5.167621-2.880199C5.558157-2.880199 5.579078-2.559402 5.579078-2.39203C5.579078-1.973599 5.279203-1.199502 5.167621-.9066C5.090909-.711333 5.063014-.648568 5.063014-.530012C5.063014-.160399 5.369863 .069738 5.725529 .069738C6.422914 .069738 6.729763-.892653 6.729763-.99726Z'/>
  <path id='g0-110' d='M4.588792-.99726C4.588792-1.08792 4.498132-1.08792 4.47721-1.08792C4.379577-1.08792 4.372603-1.046077 4.344707-.969365C4.184309-.411457 3.884433-.125529 3.605479-.125529C3.459029-.125529 3.431133-.223163 3.431133-.369614C3.431133-.530012 3.466002-.620672 3.591532-.934496C3.675218-1.150685 3.961146-1.889913 3.961146-2.280448C3.961146-2.956912 3.424159-3.075467 3.054545-3.075467C2.475716-3.075467 2.085181-2.719801 1.875965-2.440847C1.827148-2.922042 1.415691-3.075467 1.129763-3.075467C.829888-3.075467 .669489-2.859278 .578829-2.698879C.425405-2.440847 .327771-2.043337 .327771-2.008468C.327771-1.917808 .425405-1.917808 .446326-1.917808C.54396-1.917808 .550934-1.93873 .599751-2.127024C.704359-2.538481 .836862-2.880199 1.108842-2.880199C1.290162-2.880199 1.338979-2.726775 1.338979-2.538481C1.338979-2.405978 1.276214-2.147945 1.227397-1.959651L1.073973-1.332005L.850809-.439352C.822914-.348692 .781071-.174346 .781071-.153425C.781071 0 .9066 .069738 1.018182 .069738C1.143711 .069738 1.255293-.020922 1.290162-.083686S1.380822-.369614 1.415691-.516065L1.569116-1.143711C1.610959-1.297136 1.652802-1.45056 1.687671-1.610959C1.764384-1.896887 1.778331-1.952677 1.980573-2.238605C2.175841-2.517559 2.503611-2.880199 3.02665-2.880199C3.431133-2.880199 3.438107-2.524533 3.438107-2.39203C3.438107-1.973599 3.138232-1.199502 3.02665-.9066C2.949938-.711333 2.922042-.648568 2.922042-.530012C2.922042-.160399 3.228892 .069738 3.584558 .069738C4.281943 .069738 4.588792-.892653 4.588792-.99726Z'/>
  <path id='g0-111' d='M3.703113-1.855044C3.703113-2.629141 3.124284-3.075467 2.440847-3.075467C1.408717-3.075467 .432379-2.106102 .432379-1.150685C.432379-.4533 .941469 .069738 1.701619 .069738C2.698879 .069738 3.703113-.850809 3.703113-1.855044ZM3.131258-2.106102C3.131258-1.93873 3.047572-1.248319 2.740722-.760149C2.475716-.348692 2.057285-.125529 1.708593-.125529S1.011208-.348692 1.011208-.899626C1.011208-1.185554 1.143711-1.868991 1.415691-2.266501C1.715567-2.698879 2.12005-2.880199 2.433873-2.880199C2.810461-2.880199 3.131258-2.622167 3.131258-2.106102Z'/>
  <path id='g0-112' d='M3.884433-1.910834C3.884433-2.726775 3.319552-3.075467 2.838356-3.075467C2.405978-3.075467 2.036364-2.782565 1.84807-2.587298C1.729514-2.984807 1.338979-3.075467 1.129763-3.075467C.857783-3.075467 .690411-2.894147 .578829-2.705853C.439352-2.468742 .327771-2.050311 .327771-2.008468C.327771-1.917808 .425405-1.917808 .446326-1.917808C.54396-1.917808 .550934-1.93873 .599751-2.127024C.704359-2.531507 .836862-2.880199 1.108842-2.880199C1.290162-2.880199 1.338979-2.726775 1.338979-2.538481C1.338979-2.461768 1.325031-2.371108 1.318057-2.329265L.523039 .850809C.474222 1.046077 .460274 1.101868 .18132 1.101868C.09066 1.101868-.006974 1.101868-.006974 1.248319C-.006974 1.325031 .055791 1.352927 .09066 1.352927C.27198 1.352927 .502117 1.325031 .690411 1.325031C.927522 1.325031 1.192528 1.352927 1.422665 1.352927C1.48543 1.352927 1.562142 1.332005 1.562142 1.199502C1.562142 1.101868 1.464508 1.101868 1.380822 1.101868C1.227397 1.101868 1.039103 1.101868 1.039103 1.018182C1.039103 .983313 1.08792 .801993 1.115816 .697385L1.373848-.341719C1.457534-.202242 1.673724 .069738 2.092154 .069738C2.942964 .069738 3.884433-.871731 3.884433-1.910834ZM3.326526-2.203736C3.326526-1.917808 3.173101-1.206476 2.963885-.801993C2.789539-.460274 2.447821-.125529 2.092154-.125529C1.597011-.125529 1.471482-.662516 1.471482-.732254C1.471482-.760149 1.48543-.808966 1.492403-.836862L1.841096-2.238605C2.245579-2.775592 2.594271-2.880199 2.817435-2.880199C3.089415-2.880199 3.326526-2.677958 3.326526-2.203736Z'/>
  <path id='g0-115' d='M3.138232-1.080946C3.138232-1.72254 2.433873-1.84807 2.175841-1.896887C2.113076-1.910834 1.93873-1.93873 1.896887-1.952677C1.638854-2.001494 1.513325-2.147945 1.513325-2.30137C1.513325-2.461768 1.638854-2.650062 1.792279-2.747696C1.980573-2.866252 2.224658-2.880199 2.343213-2.880199C2.489664-2.880199 2.852304-2.859278 3.005729-2.622167C2.824408-2.580324 2.712827-2.433873 2.712827-2.294396C2.712827-2.133998 2.852304-2.071233 2.942964-2.071233C3.012702-2.071233 3.277709-2.113076 3.277709-2.468742C3.277709-2.922042 2.775592-3.075467 2.350187-3.075467C1.262267-3.075467 1.066999-2.273474 1.066999-2.057285C1.066999-1.799253 1.21345-1.63188 1.311083-1.548194C1.492403-1.408717 1.617933-1.380822 2.099128-1.297136C2.245579-1.26924 2.691905-1.185554 2.691905-.836862C2.691905-.718306 2.615193-.4533 2.322291-.278954C2.050311-.125529 1.708593-.125529 1.624907-.125529C1.345953-.125529 .948443-.188294 .788045-.418431C1.018182-.446326 1.171606-.620672 1.171606-.81594C1.171606-.990286 1.046077-1.073973 .899626-1.073973C.697385-1.073973 .495143-.913574 .495143-.606725C.495143-.188294 .941469 .069738 1.617933 .069738C2.901121 .069738 3.138232-.808966 3.138232-1.080946Z'/>
  <path id='g0-116' d='M2.608219-.99726C2.608219-1.08792 2.517559-1.08792 2.496638-1.08792C2.412951-1.08792 2.405978-1.073973 2.350187-.955417C2.154919-.516065 1.799253-.125529 1.415691-.125529C1.26924-.125529 1.171606-.216189 1.171606-.467248C1.171606-.536986 1.199502-.683437 1.21345-.753176L1.715567-2.75467H2.426899C2.559402-2.75467 2.650062-2.75467 2.650062-2.908095C2.650062-3.005729 2.559402-3.005729 2.440847-3.005729H1.778331L2.036364-4.037858C2.043337-4.072727 2.057285-4.107597 2.057285-4.135492C2.057285-4.261021 1.959651-4.358655 1.820174-4.358655C1.645828-4.358655 1.54122-4.2401 1.492403-4.05878C1.443587-3.884433 1.534247-4.219178 1.227397-3.005729H.516065C.383562-3.005729 .292902-3.005729 .292902-2.852304C.292902-2.75467 .376588-2.75467 .502117-2.75467H1.164633L.753176-1.108842C.711333-.934496 .648568-.683437 .648568-.592777C.648568-.18132 .99726 .069738 1.39477 .069738C2.168867 .069738 2.608219-.9066 2.608219-.99726Z'/>
  <path id='g1-78' d='M8.777086-6.694894C8.777086-6.694894 8.777086-6.804483 8.647572-6.804483C8.318804-6.804483 7.970112-6.774595 7.641345-6.774595C7.302615-6.774595 6.953923-6.804483 6.625156-6.804483C6.56538-6.804483 6.445828-6.804483 6.445828-6.60523C6.445828-6.495641 6.545455-6.495641 6.625156-6.495641C7.193026-6.485679 7.302615-6.276463 7.302615-6.057285C7.302615-6.027397 7.28269-5.877958 7.272727-5.84807L6.156912-1.414695L3.955168-6.615193C3.875467-6.794521 3.865504-6.804483 3.636364-6.804483H2.30137C2.102117-6.804483 2.012453-6.804483 2.012453-6.60523C2.012453-6.495641 2.102117-6.495641 2.291407-6.495641C2.34122-6.495641 2.968867-6.495641 2.968867-6.405978L1.633873-1.05604C1.534247-.657534 1.364882-.33873 .557908-.308842C.498132-.308842 .388543-.298879 .388543-.109589C.388543-.039851 .438356 0 .518057 0C.836862 0 1.185554-.029888 1.514321-.029888C1.853051-.029888 2.211706 0 2.540473 0C2.590286 0 2.719801 0 2.719801-.199253C2.719801-.298879 2.630137-.308842 2.520548-.308842C1.942715-.328767 1.863014-.547945 1.863014-.747198C1.863014-.816936 1.872976-.86675 1.902864-.976339L3.217933-6.236613C3.257783-6.176837 3.257783-6.156912 3.307597-6.057285L5.788294-.18929C5.858032-.019925 5.88792 0 5.977584 0C6.087173 0 6.087173-.029888 6.136986-.209215L7.531756-5.758406C7.631382-6.156912 7.81071-6.465753 8.607721-6.495641C8.657534-6.495641 8.777086-6.505604 8.777086-6.694894Z'/>
  </defs>
  <g id='page1'>
  <use x='143.336101' y='0' xlink:href='#g1-78'/>
  <use x='151.340809' y='1.494381' xlink:href='#g0-99'/>
  <use x='154.901204' y='1.494381' xlink:href='#g0-111'/>
  <use x='158.83369' y='1.494381' xlink:href='#g0-109'/>
  <use x='165.903296' y='1.494381' xlink:href='#g0-112'/>
  <use x='170.010252' y='1.494381' xlink:href='#g0-111'/>
  <use x='173.942739' y='1.494381' xlink:href='#g0-110'/>
  <use x='178.867601' y='1.494381' xlink:href='#g0-101'/>
  <use x='182.647552' y='1.494381' xlink:href='#g0-110'/>
  <use x='187.572415' y='1.494381' xlink:href='#g0-116'/>
  <use x='190.581986' y='1.494381' xlink:href='#g0-115'/>
  <use x='197.6076' y='0' xlink:href='#g2-58'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''Reset'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='25.186862pt' height='6.807795pt' viewBox='159.262112 -6.807795 25.186862 6.807795'>
  <defs>
  <path id='g0-82' d='M6.435866-5.50934C6.435866-5.17061 6.276463-4.483188 5.88792-4.094645C5.628892-3.835616 5.100872-3.516812 4.204234-3.516812H3.088418L3.73599-6.117061C3.795766-6.356164 3.825654-6.455791 4.014944-6.485679C4.104608-6.495641 4.423412-6.495641 4.622665-6.495641C5.330012-6.495641 6.435866-6.495641 6.435866-5.50934ZM7.521793-.926526C7.521793-1.046077 7.402242-1.046077 7.402242-1.046077C7.312578-1.046077 7.292653-.976339 7.272727-.9066C7.023661-.169365 6.595268 0 6.366127 0C6.03736 0 5.967621-.219178 5.967621-.607721C5.967621-.916563 6.027397-1.424658 6.067248-1.743462C6.087173-1.882939 6.107098-2.072229 6.107098-2.211706C6.107098-2.978829 5.439601-3.287671 5.17061-3.387298C6.176837-3.606476 7.362391-4.303861 7.362391-5.310087C7.362391-6.166874 6.465753-6.804483 5.160648-6.804483H2.321295C2.122042-6.804483 2.032379-6.804483 2.032379-6.60523C2.032379-6.495641 2.122042-6.495641 2.311333-6.495641C2.311333-6.495641 2.520548-6.495641 2.689913-6.475716C2.86924-6.455791 2.958904-6.445828 2.958904-6.316314C2.958904-6.276463 2.948941-6.246575 2.919054-6.127024L1.58406-.777086C1.484433-.388543 1.464508-.308842 .67746-.308842C.498132-.308842 .408468-.308842 .408468-.109589C.408468 0 .547945 0 .547945 0L1.803238-.029888L3.068493 0C3.148194 0 3.267746 0 3.267746-.199253C3.267746-.308842 3.178082-.308842 2.988792-.308842C2.620174-.308842 2.34122-.308842 2.34122-.488169C2.34122-.547945 2.361146-.597758 2.371108-.657534L3.028643-3.297634H4.214197C5.120797-3.297634 5.300125-2.739726 5.300125-2.391034C5.300125-2.241594 5.220423-1.932752 5.160648-1.703611C5.090909-1.424658 5.001245-1.05604 5.001245-.856787C5.001245 .219178 6.196762 .219178 6.326276 .219178C7.173101 .219178 7.521793-.787049 7.521793-.926526Z'/>
  <path id='g0-101' d='M4.283935-1.066002C4.283935-1.125778 4.224159-1.195517 4.164384-1.195517C4.11457-1.195517 4.094645-1.175592 4.034869-1.09589C3.247821-.109589 2.161893-.109589 2.042341-.109589C1.265255-.109589 1.175592-.946451 1.175592-1.265255C1.175592-1.384807 1.185554-1.693649 1.334994-2.30137H1.863014C2.15193-2.30137 2.889166-2.321295 3.387298-2.530511C4.084682-2.82939 4.134496-3.417186 4.134496-3.556663C4.134496-3.995019 3.755915-4.403487 3.068493-4.403487C1.96264-4.403487 .458281-3.437111 .458281-1.693649C.458281-.67746 1.046077 .109589 2.022416 .109589C3.447073 .109589 4.283935-.946451 4.283935-1.066002ZM3.805729-3.556663C3.805729-2.520548 2.211706-2.520548 1.803238-2.520548H1.39477C1.783313-4.034869 2.809465-4.184309 3.068493-4.184309C3.536737-4.184309 3.805729-3.895392 3.805729-3.556663Z'/>
  <path id='g0-115' d='M3.945205-1.544209C3.945205-1.902864 3.755915-2.15193 3.636364-2.271482C3.367372-2.550436 3.078456-2.600249 2.6401-2.689913C2.281445-2.769614 1.882939-2.839352 1.882939-3.287671C1.882939-3.576588 2.122042-4.184309 2.998755-4.184309C3.247821-4.184309 3.745953-4.11457 3.895392-3.726027C3.616438-3.716065 3.417186-3.496887 3.417186-3.277709C3.417186-3.138232 3.506849-2.988792 3.726027-2.988792S4.184309-3.158157 4.184309-3.5467C4.184309-3.995019 3.755915-4.403487 2.998755-4.403487C1.683686-4.403487 1.315068-3.387298 1.315068-2.948941C1.315068-2.171856 2.052304-2.022416 2.34122-1.96264C2.859278-1.863014 3.377335-1.753425 3.377335-1.205479C3.377335-.946451 3.148194-.109589 1.952677-.109589C1.8132-.109589 1.046077-.109589 .816936-.637609C1.195517-.587796 1.444583-.886675 1.444583-1.165629C1.444583-1.39477 1.285181-1.514321 1.075965-1.514321C.816936-1.514321 .518057-1.305106 .518057-.856787C.518057-.288917 1.085928 .109589 1.942715 .109589C3.556663 .109589 3.945205-1.09589 3.945205-1.544209Z'/>
  <path id='g0-116' d='M3.128269-1.424658C3.128269-1.524284 3.048568-1.524284 3.008717-1.524284C2.919054-1.524284 2.909091-1.494396 2.859278-1.384807C2.430884-.348692 1.902864-.109589 1.564134-.109589C1.354919-.109589 1.255293-.239103 1.255293-.56787C1.255293-.806974 1.275218-.876712 1.315068-1.046077L2.052304-3.985056H2.988792C3.188045-3.985056 3.287671-3.985056 3.287671-4.184309C3.287671-4.293898 3.188045-4.293898 3.008717-4.293898H2.132005C2.49066-5.708593 2.540473-5.907846 2.540473-5.967621C2.540473-6.136986 2.420922-6.236613 2.251557-6.236613C2.221669-6.236613 1.942715-6.22665 1.853051-5.877958L1.464508-4.293898H.52802C.328767-4.293898 .229141-4.293898 .229141-4.104608C.229141-3.985056 .308842-3.985056 .508095-3.985056H1.384807C.667497-1.155666 .627646-.986301 .627646-.806974C.627646-.268991 1.006227 .109589 1.544209 .109589C2.560399 .109589 3.128269-1.344956 3.128269-1.424658Z'/>
  </defs>
  <g id='page1'>
  <use x='159.262112' y='0' xlink:href='#g0-82'/>
  <use x='166.903609' y='0' xlink:href='#g0-101'/>
  <use x='171.54248' y='0' xlink:href='#g0-115'/>
  <use x='176.212468' y='0' xlink:href='#g0-101'/>
  <use x='180.851339' y='0' xlink:href='#g0-116'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''e'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.638871pt' height='4.289468pt' viewBox='169.536099 -4.289468 4.638871 4.289468'>
  <defs>
  <path id='g0-101' d='M4.283935-1.066002C4.283935-1.125778 4.224159-1.195517 4.164384-1.195517C4.11457-1.195517 4.094645-1.175592 4.034869-1.09589C3.247821-.109589 2.161893-.109589 2.042341-.109589C1.265255-.109589 1.175592-.946451 1.175592-1.265255C1.175592-1.384807 1.185554-1.693649 1.334994-2.30137H1.863014C2.15193-2.30137 2.889166-2.321295 3.387298-2.530511C4.084682-2.82939 4.134496-3.417186 4.134496-3.556663C4.134496-3.995019 3.755915-4.403487 3.068493-4.403487C1.96264-4.403487 .458281-3.437111 .458281-1.693649C.458281-.67746 1.046077 .109589 2.022416 .109589C3.447073 .109589 4.283935-.946451 4.283935-1.066002ZM3.805729-3.556663C3.805729-2.520548 2.211706-2.520548 1.803238-2.520548H1.39477C1.783313-4.034869 2.809465-4.184309 3.068493-4.184309C3.536737-4.184309 3.805729-3.895392 3.805729-3.556663Z'/>
  </defs>
  <g id='page1'>
  <use x='169.536099' y='0' xlink:href='#g0-101'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''+'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='7.748938pt' height='6.635122pt' viewBox='167.981079 -5.808221 7.748938 6.635122'>
  <defs>
  <path id='g0-43' d='M7.183064-2.49066C7.183064-2.689913 6.993773-2.689913 6.854296-2.689913H4.07472V-5.479452C4.07472-5.618929 4.07472-5.808219 3.875467-5.808219S3.676214-5.618929 3.676214-5.479452V-2.689913H.886675C.747198-2.689913 .557908-2.689913 .557908-2.49066S.747198-2.291407 .886675-2.291407H3.676214V.498132C3.676214 .637609 3.676214 .826899 3.875467 .826899S4.07472 .637609 4.07472 .498132V-2.291407H6.854296C6.993773-2.291407 7.183064-2.291407 7.183064-2.49066Z'/>
  </defs>
  <g id='page1'>
  <use x='167.981079' y='0' xlink:href='#g0-43'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''-'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='7.748748pt' height='6.641773pt' viewBox='167.98117 -5.811546 7.748748 6.641773'>
  <defs>
  <path id='g0-0' d='M6.914072-2.49066C6.914072-2.689913 6.724782-2.689913 6.585305-2.689913H1.155666C1.016189-2.689913 .826899-2.689913 .826899-2.49066S1.016189-2.291407 1.155666-2.291407H6.585305C6.724782-2.291407 6.914072-2.291407 6.914072-2.49066Z'/>
  </defs>
  <g id='page1'>
  <use x='167.98117' y='0' xlink:href='#g0-0'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''.'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='2.767408pt' height='1.051612pt' viewBox='170.47183 -1.051612 2.767408 1.051612'>
  <defs>
  <path id='g0-58' d='M1.912827-.52802C1.912827-.816936 1.673724-1.05604 1.384807-1.05604S.856787-.816936 .856787-.52802S1.09589 0 1.384807 0S1.912827-.239103 1.912827-.52802Z'/>
  </defs>
  <g id='page1'>
  <use x='170.47183' y='0' xlink:href='#g0-58'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''0'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-48' d='M4.582814-3.188045C4.582814-3.985056 4.533001-4.782067 4.184309-5.519303C3.726027-6.475716 2.909091-6.635118 2.49066-6.635118C1.892902-6.635118 1.165629-6.37609 .757161-5.449564C.438356-4.762142 .388543-3.985056 .388543-3.188045C.388543-2.440847 .428394-1.544209 .836862-.787049C1.265255 .019925 1.992528 .219178 2.480697 .219178C3.01868 .219178 3.775841 .009963 4.214197-.936488C4.533001-1.62391 4.582814-2.400996 4.582814-3.188045ZM3.755915-3.307597C3.755915-2.560399 3.755915-1.882939 3.646326-1.24533C3.496887-.298879 2.929016 0 2.480697 0C2.092154 0 1.504359-.249066 1.325031-1.205479C1.215442-1.803238 1.215442-2.719801 1.215442-3.307597C1.215442-3.945205 1.215442-4.60274 1.295143-5.140722C1.484433-6.326276 2.231631-6.41594 2.480697-6.41594C2.809465-6.41594 3.466999-6.236613 3.656289-5.250311C3.755915-4.692403 3.755915-3.935243 3.755915-3.307597Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-48'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''1'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-49' d='M4.174346 0V-.308842H3.855542C2.958904-.308842 2.929016-.418431 2.929016-.787049V-6.37609C2.929016-6.615193 2.929016-6.635118 2.699875-6.635118C2.082192-5.997509 1.205479-5.997509 .886675-5.997509V-5.688667C1.085928-5.688667 1.673724-5.688667 2.191781-5.947696V-.787049C2.191781-.428394 2.161893-.308842 1.265255-.308842H.946451V0C1.295143-.029888 2.161893-.029888 2.560399-.029888S3.825654-.029888 4.174346 0Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-49'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''2'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-50' d='M4.473225-1.733499H4.224159C4.174346-1.43462 4.104608-.996264 4.004981-.846824C3.935243-.767123 3.277709-.767123 3.058531-.767123H1.265255L2.321295-1.793275C3.875467-3.16812 4.473225-3.706102 4.473225-4.702366C4.473225-5.838107 3.576588-6.635118 2.361146-6.635118C1.235367-6.635118 .498132-5.718555 .498132-4.83188C.498132-4.273973 .996264-4.273973 1.026152-4.273973C1.195517-4.273973 1.544209-4.393524 1.544209-4.801993C1.544209-5.061021 1.364882-5.32005 1.016189-5.32005C.936488-5.32005 .916563-5.32005 .886675-5.310087C1.115816-5.957659 1.653798-6.326276 2.231631-6.326276C3.138232-6.326276 3.566625-5.519303 3.566625-4.702366C3.566625-3.905355 3.068493-3.118306 2.520548-2.500623L.607721-.368618C.498132-.259029 .498132-.239103 .498132 0H4.194271L4.473225-1.733499Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-50'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''3'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-51' d='M4.552927-1.703611C4.552927-2.520548 3.92528-3.297634 2.889166-3.506849C3.706102-3.775841 4.283935-4.473225 4.283935-5.260274C4.283935-6.07721 3.407223-6.635118 2.450809-6.635118C1.444583-6.635118 .687422-6.03736 .687422-5.280199C.687422-4.951432 .9066-4.762142 1.195517-4.762142C1.504359-4.762142 1.703611-4.98132 1.703611-5.270237C1.703611-5.768369 1.235367-5.768369 1.085928-5.768369C1.39477-6.256538 2.052304-6.386052 2.410959-6.386052C2.819427-6.386052 3.367372-6.166874 3.367372-5.270237C3.367372-5.150685 3.347447-4.572852 3.088418-4.134496C2.789539-3.656289 2.450809-3.626401 2.201743-3.616438C2.122042-3.606476 1.882939-3.58655 1.8132-3.58655C1.733499-3.576588 1.663761-3.566625 1.663761-3.466999C1.663761-3.35741 1.733499-3.35741 1.902864-3.35741H2.34122C3.158157-3.35741 3.526775-2.67995 3.526775-1.703611C3.526775-.348692 2.839352-.059776 2.400996-.059776C1.972603-.059776 1.225405-.229141 .876712-.816936C1.225405-.767123 1.534247-.986301 1.534247-1.364882C1.534247-1.723537 1.265255-1.92279 .976339-1.92279C.737235-1.92279 .418431-1.783313 .418431-1.344956C.418431-.438356 1.344956 .219178 2.430884 .219178C3.646326 .219178 4.552927-.687422 4.552927-1.703611Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-51'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''4'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-52' d='M4.692403-1.643836V-1.952677H3.696139V-6.485679C3.696139-6.684932 3.696139-6.744707 3.536737-6.744707C3.447073-6.744707 3.417186-6.744707 3.337484-6.625156L.278954-1.952677V-1.643836H2.929016V-.777086C2.929016-.418431 2.909091-.308842 2.171856-.308842H1.96264V0C2.371108-.029888 2.889166-.029888 3.307597-.029888S4.254047-.029888 4.662516 0V-.308842H4.4533C3.716065-.308842 3.696139-.418431 3.696139-.777086V-1.643836H4.692403ZM2.988792-1.952677H.557908L2.988792-5.668742V-1.952677Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-52'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''5'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-53' d='M4.473225-2.002491C4.473225-3.188045 3.656289-4.184309 2.580324-4.184309C2.102117-4.184309 1.673724-4.024907 1.315068-3.676214V-5.618929C1.514321-5.559153 1.843088-5.489415 2.161893-5.489415C3.387298-5.489415 4.084682-6.396015 4.084682-6.525529C4.084682-6.585305 4.054795-6.635118 3.985056-6.635118C3.985056-6.635118 3.955168-6.635118 3.905355-6.60523C3.706102-6.515567 3.217933-6.316314 2.550436-6.316314C2.15193-6.316314 1.693649-6.386052 1.225405-6.595268C1.145704-6.625156 1.105853-6.625156 1.105853-6.625156C1.006227-6.625156 1.006227-6.545455 1.006227-6.386052V-3.437111C1.006227-3.257783 1.006227-3.178082 1.145704-3.178082C1.215442-3.178082 1.235367-3.20797 1.275218-3.267746C1.384807-3.427148 1.753425-3.965131 2.560399-3.965131C3.078456-3.965131 3.327522-3.506849 3.407223-3.327522C3.566625-2.958904 3.58655-2.570361 3.58655-2.072229C3.58655-1.723537 3.58655-1.125778 3.347447-.707347C3.108344-.318804 2.739726-.059776 2.281445-.059776C1.554172-.059776 .986301-.587796 .816936-1.175592C.846824-1.165629 .876712-1.155666 .986301-1.155666C1.315068-1.155666 1.484433-1.404732 1.484433-1.643836S1.315068-2.132005 .986301-2.132005C.846824-2.132005 .498132-2.062267 .498132-1.603985C.498132-.747198 1.185554 .219178 2.30137 .219178C3.457036 .219178 4.473225-.737235 4.473225-2.002491Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-53'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''6'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-54' d='M4.552927-2.032379C4.552927-3.297634 3.666252-4.254047 2.560399-4.254047C1.882939-4.254047 1.514321-3.745953 1.315068-3.267746V-3.506849C1.315068-6.027397 2.550436-6.386052 3.058531-6.386052C3.297634-6.386052 3.716065-6.326276 3.935243-5.987547C3.785803-5.987547 3.387298-5.987547 3.387298-5.539228C3.387298-5.230386 3.626401-5.080946 3.845579-5.080946C4.004981-5.080946 4.303861-5.17061 4.303861-5.559153C4.303861-6.156912 3.865504-6.635118 3.038605-6.635118C1.763387-6.635118 .418431-5.349938 .418431-3.148194C.418431-.488169 1.574097 .219178 2.500623 .219178C3.606476 .219178 4.552927-.71731 4.552927-2.032379ZM3.656289-2.042341C3.656289-1.564134 3.656289-1.066002 3.486924-.707347C3.188045-.109589 2.729763-.059776 2.500623-.059776C1.872976-.059776 1.574097-.657534 1.514321-.806974C1.334994-1.275218 1.334994-2.072229 1.334994-2.251557C1.334994-3.028643 1.653798-4.024907 2.550436-4.024907C2.709838-4.024907 3.16812-4.024907 3.476961-3.407223C3.656289-3.038605 3.656289-2.530511 3.656289-2.042341Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-54'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''7'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-55' d='M4.83188-6.41594H2.410959C1.195517-6.41594 1.175592-6.545455 1.135741-6.734745H.886675L.557908-4.682441H.806974C.836862-4.841843 .926526-5.469489 1.05604-5.589041C1.125778-5.648817 1.902864-5.648817 2.032379-5.648817H4.094645L2.978829-4.07472C2.082192-2.729763 1.753425-1.344956 1.753425-.328767C1.753425-.229141 1.753425 .219178 2.211706 .219178S2.669988-.229141 2.669988-.328767V-.836862C2.669988-1.384807 2.699875-1.932752 2.779577-2.470735C2.819427-2.699875 2.958904-3.556663 3.39726-4.174346L4.742217-6.067248C4.83188-6.1868 4.83188-6.206725 4.83188-6.41594Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-55'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''8'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-56' d='M4.552927-1.673724C4.552927-2.032379 4.443337-2.480697 4.064757-2.899128C3.875467-3.108344 3.716065-3.20797 3.078456-3.606476C3.795766-3.975093 4.283935-4.493151 4.283935-5.150685C4.283935-6.067248 3.39726-6.635118 2.49066-6.635118C1.494396-6.635118 .687422-5.897883 .687422-4.971357C.687422-4.79203 .707347-4.343711 1.125778-3.875467C1.235367-3.755915 1.603985-3.506849 1.853051-3.337484C1.275218-3.048568 .418431-2.49066 .418431-1.504359C.418431-.448319 1.43462 .219178 2.480697 .219178C3.606476 .219178 4.552927-.607721 4.552927-1.673724ZM3.845579-5.150685C3.845579-4.582814 3.457036-4.104608 2.859278-3.755915L1.62391-4.552927C1.165629-4.851806 1.125778-5.190535 1.125778-5.3599C1.125778-5.967621 1.77335-6.386052 2.480697-6.386052C3.20797-6.386052 3.845579-5.867995 3.845579-5.150685ZM4.054795-1.315068C4.054795-.577833 3.307597-.059776 2.49066-.059776C1.633873-.059776 .916563-.67746 .916563-1.504359C.916563-2.082192 1.235367-2.719801 2.082192-3.188045L3.307597-2.410959C3.58655-2.221669 4.054795-1.92279 4.054795-1.315068Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-56'/>
  </g>
  </svg>''';
  SingleStringMathTex.texToSVGMap[r'''align*''']![r'''9'''] =
      r'''<?xml version='1.0' encoding='UTF-8'?>
  <!-- This file was generated by dvisvgm 2.13.3 -->
  <svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='4.98132pt' height='6.273719pt' viewBox='169.364882 -6.273719 4.98132 6.273719'>
  <defs>
  <path id='g0-57' d='M4.552927-3.277709C4.552927-5.957659 3.407223-6.635118 2.520548-6.635118C1.972603-6.635118 1.484433-6.455791 1.05604-6.007472C.647572-5.559153 .418431-5.140722 .418431-4.393524C.418431-3.148194 1.295143-2.171856 2.410959-2.171856C3.01868-2.171856 3.427148-2.590286 3.656289-3.16812V-2.849315C3.656289-.518057 2.620174-.059776 2.042341-.059776C1.872976-.059776 1.334994-.079701 1.066002-.418431C1.504359-.418431 1.58406-.707347 1.58406-.876712C1.58406-1.185554 1.344956-1.334994 1.125778-1.334994C.966376-1.334994 .667497-1.24533 .667497-.856787C.667497-.18929 1.205479 .219178 2.052304 .219178C3.337484 .219178 4.552927-1.135741 4.552927-3.277709ZM3.636364-4.194271C3.636364-3.367372 3.297634-2.400996 2.420922-2.400996C2.261519-2.400996 1.803238-2.400996 1.494396-3.028643C1.315068-3.39726 1.315068-3.895392 1.315068-4.383562C1.315068-4.921544 1.315068-5.389788 1.524284-5.758406C1.793275-6.256538 2.171856-6.386052 2.520548-6.386052C2.978829-6.386052 3.307597-6.047323 3.476961-5.599004C3.596513-5.280199 3.636364-4.652553 3.636364-4.194271Z'/>
  </defs>
  <g id='page1'>
  <use x='169.364882' y='0' xlink:href='#g0-57'/>
  </g>
  </svg>''';

  var display = Canvas2DDisplay(document.getElementById('canvas-container')!);
  GaussianScene gs = GaussianScene();

  // Create an input element for file selection
  // Only Text or csv files are allowed
  // Comma separated list of double values
  InputElement fileInput = document.getElementById("fileInput") as InputElement;
  Element contentUpload = document.getElementById("uploadedContent") as Element;
  fileInput.accept = 'text/plain';

  fileInput.onChange.listen((e) {
    final files = fileInput.files;
    if (files!.length == 1) {
      final file = files[0];
      final reader = FileReader();

      reader.onLoad.listen((e) {
        final contents = reader.result as String;
        print(contents);

        List<String> contents2 = contents.split(",");
        List<double> contents3 = [];
        for (var i = 0; i < contents2.length; i++) {
          contents3.add(double.parse(contents2[i]));
        }

        contentUpload.setInnerHtml(contents3.toString());

        gs.setData(contents3);
        // var scene = gs..bindDisplay(display);
      });

      reader.onError.listen((e) {
        print('Error reading file');
      });

      reader.readAsText(file);
    }
  });

  var scene = gs..bindDisplay(display);
  scene.run();
}

class GaussianScene extends Scene {
  late Axes axes;
  late Axes axes2;
  late Button next;
  late Dot dot;
  late GMM1D gmm;
  late List<double> weights;
  late VGroup currentGMM;
  late VGroup gaussians2;
  late VGroup nextGMM;
  late List<double> means1;
  late List<double> covs1;

  late Button b1;
  late Button b2;
  late Button b3;
  late Button b4;
  late Button b5;

  late VGroup dots;

  late VMobject playShape;
  late Triangle tri;
  late Square sqr;
  late Rectangle mcSurroundingRectangle;
  late Rectangle numComponentsSurroundingRectangle;

  late VGroup mcVG;

  int state = 0;
  int iteration = 0;
  late int numComponents;
  bool isPlay = false;
  bool isUploaded = false;
  double lowerCovsThreshold = 0.8;
  double upperCovsThreshold = 3;

  double mainButtonsTopOffset = -0.5;
  double mainButtonsLeftOffset = 0.0;
  double letterOffset = 1.5;

  double mcDisplayTopOffset = 0.1;
  double mcDisplayLeftOffset = 6.5;
  double mcTextOffset = 0.6;

  double playerButtonOffset = 1.0;
  double playerButtonHeight = 0.5;
  double playerButtonWidth = 0.8;

  double fixedComponentNumberDiplayLeftOffset = 3.5;

  // List<double> data1 = [1.1, 0.6, 1.3, 1.1, 5.2, 4.7, 5.1, 5.3, 5.2, 12.3, 12.1, 12.9, 12.4, 12];
  late List<double> data1;
  late List<double> initialMeans;
  late List<double> initialCovs;

  late List<double> xRange;
  late List<double> gammas;
  late Map m;

  @override
  FutureOr<void> preload() {
    MathTex.preload(r'\gets');
    MathTex.preload(r'\to');
    MathTex.preload(r'\textnormal{Means} \hspace{0.1cm} \mu:');
    MathTex.preload(r'\textnormal{Variances} \hspace{0.1cm} \sigma^2:');
    MathTex.preload(r'N_{components}:');

    Tex.preload(r'Reset');

    Tex.preload('e');
    Tex.preload('+');
    Tex.preload('-');
    Tex.preload('.');
    Tex.preload('0');
    Tex.preload('1');
    Tex.preload('2');
    Tex.preload('3');
    Tex.preload('4');
    Tex.preload('5');
    Tex.preload('6');
    Tex.preload('7');
    Tex.preload('8');
    Tex.preload('9');
  }

  @override
  Future construct() async {
    m = makeMap();
    // await loadingAnimation(m);

    if (!isUploaded) {
      data1 = [
        -4.0,
        1.1,
        0.6,
        1.3,
        1.1,
        5.2,
        4.7,
        5.1,
        5.3,
        5.2,
        12.3,
        12.1,
        12.9,
        12.4,
        12
      ];
      xRange = setXRange(data1);
      print(xRange);
      // xRange = [-5, 20];
    }
    numComponents = 3;
    initialMeans = [1, 3, 7];
    initialCovs = [1, 2, 3];
    List<double> means1 = new List<double>.from(initialMeans);
    List<double> covs1 = new List<double>.from(initialCovs);
    // GMM Initializations
    List<double> weights = initializeWeights(numComponents);
    gmm = GMM1D(numComponents, weights, means1, covs1);

    // Creating Premade Manim Objects
    axes = addAxes(xRange);
    currentGMM = createGMM(means1, covs1, xRange, axes);
    dots = createDotsFromData(axes, data1);
    Animation ag = createInitialGMMAnimations(currentGMM);

    makeButtonObjects();
    b1 = makeUpdateGMMButton();
    b2 = makeResetGMMButton();
    b3 = playGMMButton();
    b4 = makePrevGMMButton();

    // ANIMATIONS

    // Axes & Data

    await play(FadeIn(axes));
    await play(FadeIn(dots));
    await play(ag);

    AnimationGroup numberDisplayAnimation = createNumberDisplay(means1, covs1);
    AnimationGroup fixedComponentDisplayAnimation =
        fixedComponentNumberDisplay();

    AnimationGroup mainButtons = AnimationGroup([
      ShowCreation(b1),
      ShowCreation(b2),
      ShowCreation(b3),
      ShowCreation(b4),
    ]);

    // CREATE DISPLAYS
    await playMany(
        [numberDisplayAnimation, fixedComponentDisplayAnimation, mainButtons]);

    // HANDLE INTERACTION
    await continueRendering();
  }

  // CONSTRUCTION FUNCTION ENDS HERE
  // CONSTRUCTION FUNCTION ENDS HERE
  // CONSTRUCTION FUNCTION ENDS HERE
  // CONSTRUCTION FUNCTION ENDS HERE
  // CONSTRUCTION FUNCTION ENDS HERE

  void setData(uploadedData) {
    double mean = uploadedData.reduce((a, b) => a + b) / uploadedData.length;
    double variance = 0;

    for (var i = 0; i < uploadedData.length; i++) {
      variance += (uploadedData[i] - mean) * (uploadedData[i] - mean);
    }

    variance /= uploadedData.length;

    List<double> normalizedData = [];
    for (var i = 0; i < uploadedData.length; i++) {
      normalizedData.add((uploadedData - mean) / variance);
    }

    data1 = normalizedData;
    isUploaded = true;
    state = 5;
  }

  Future restartWithUploadedData() async {
    print("Uploaded Data");

    xRange = setXRange(data1);
    numComponents = 3;
    initialMeans = [1, 3, 7];
    initialCovs = [1, 2, 3];
    iteration = 0;

    List<double> means1 = new List<double>.from(initialMeans);
    List<double> covs1 = new List<double>.from(initialCovs);
    // GMM Initializations
    List<double> weights = initializeWeights(numComponents);
    gmm = GMM1D(numComponents, weights, means1, covs1);
    Axes newAxes = addAxes(xRange);
    VGroup dots2 = createDotsFromData(newAxes, data1);
    VGroup newGMM = createGMM(means1, covs1, xRange, newAxes);

    await playMany([
      Transform(axes, target: newAxes),
      Transform(dots, target: dots2),
      Transform(currentGMM, target: newGMM)
    ]);

    axes = newAxes;
    dots = dots2;
  }

  // Handles all subsequent rendering and triggered animations
  Future continueRendering() async {
    while (true) {
      // print(state);
      if (state == 1) {
        // Next
        // Updates the GMM by 1 EM step
        await nextGMMIteration();
        state = 0;
      } else if (state == 2) {
        // Reset
        print("HIHIHI");
        await resetGMM();

        state = 0;
      } else if (state == 3) {
        // Play
        await playGMM();
      } else if (state == 4) {
        // Prev
        await prevGMMIteration();
        state = 0;
      } else if (state == 5) {
        // Restart with Uploaded Data
        await restartWithUploadedData();

        state = 0;
      } else {
        await wait();
      }

      // if (state != 0) state = 0;
    }
  }

  double min1(double a, double b) {
    return a < b ? a : b;
  }

  double max1(double a, double b) {
    return a < b ? b : a;
  }

  List<double> setXRange(data1) {
    double dataMin = data1.reduce(min1);
    double dataMax = data1.reduce(max1);
    double dataPadding = (dataMax - dataMin) / 4;
    List<double> xRange1 = [dataMin - dataPadding, dataMax + dataPadding];
    return xRange1;
  }

  // FUNCTIONS
  // MAKING OBJECTS

  Future prevGMMIteration() async {
    iteration--;
    List<double> weights = initializeWeights(numComponents);
    List<double> means1 = new List<double>.from(initialMeans);
    List<double> covs1 = new List<double>.from(initialCovs);

    gmm = GMM1D(numComponents, weights, means1, covs1);

    for (var i = 0; i < iteration; i++) {
      List<List<double>> resp = gmm.eStep(data1);
      gmm.mStep(data1, resp);
    }

    List<double> means2 = gmm.means;
    List<double> covs2 = gmm.variances;

    nextGMM = createGMM(means2, covs2, xRange, axes);
    Animation mcVGAnimation = transformMCDisplay(means2, covs2);

    await playMany([Transform(currentGMM, target: nextGMM), mcVGAnimation]);
  }

  Future nextGMMIteration() async {
    List<List<double>> resp = gmm.eStep(data1);
    final temp = gmm.mStep(data1, resp);
    iteration++;

    List<double> means2 = gmm.means;
    List<double> covs2 = gmm.variances;

    nextGMM = createGMM(means2, covs2, xRange, axes);
    Animation mcVGAnimation = transformMCDisplay(means2, covs2);

    await playMany([Transform(currentGMM, target: nextGMM), mcVGAnimation]);
  }

  Future resetGMM() async {
    List<double> weights = initializeWeights(numComponents);
    List<double> means1 = new List<double>.from(initialMeans);
    List<double> covs1 = new List<double>.from(initialCovs);

    gmm = GMM1D(numComponents, weights, means1, covs1);
    iteration = 0;
    nextGMM = createGMM(means1, covs1, xRange, axes);
    Animation mcVGAnimation = transformMCDisplay(means1, covs1);

    await playMany([Transform(currentGMM, target: nextGMM), mcVGAnimation]);
  }

  Future playGMM() async {
    List<List<double>> resp = gmm.eStep(data1);
    gmm.mStep(data1, resp);
    iteration++;
    print("iteration");
    print(iteration);

    List<double> means2 = gmm.means;
    List<double> covs2 = gmm.variances;

    bool hasConverged = isConverged(covs2);
    print(means2);
    print(covs2);
    print("hasConverged");
    print(hasConverged);
    if (hasConverged && iteration > 3) {
      state = 0;
      playShape.become(tri);
    }

    nextGMM = createGMM(means2, covs2, xRange, axes);
    Animation mcVGAnimation = transformMCDisplay(means2, covs2);

    await playMany([Transform(currentGMM, target: nextGMM), mcVGAnimation]);
  }

  void stopUpdater() {
    print("Paused");

    state = 5;
  }

  void nextGMMUpdater() {
    state = 1;
  }

  void resetGMMUpdater() {
    print("state");
    print(state);
    state = 2;
  }

  void playGMMUpdater() {
    if (isPlay) {
      playShape.become(tri);
      state = 0;
    } else {
      playShape.become(sqr);
      state = 3;
    }
    isPlay = !isPlay;
    print("Play");
  }

  void prevGMMUpdater() {
    state = 4;
  }

  Rectangle makePlayerButton(
      {double height: 0.5, double width: 0.8, Color color: WHITE}) {
    Rectangle r2 = Rectangle(height: height, width: width, color: color);
    r2.fillColors = [TRANSPARENT];
    return r2;
  }

  void makeButtonObjects() {
    tri = Triangle(color: GREEN);
    tri
      ..scale(Vector3(0.16, 0.16, 1))
      ..rotate(PI / 2)
      ..toCorner(corner: UL)
      ..shift(Vector3(playerButtonOffset + mainButtonsLeftOffset + 0.3,
          mainButtonsTopOffset - 0.12, 0.0));
    sqr = Square(color: RED);
    sqr
      ..scale(Vector3(0.13, 0.13, 1))
      ..rotate(PI / 2)
      ..toCorner(corner: UL)
      ..shift(Vector3(playerButtonOffset + mainButtonsLeftOffset + 0.3,
          mainButtonsTopOffset - 0.12, 0.0));
  }

  Button playGMMButton() {
    Rectangle r2 =
        makePlayerButton(height: playerButtonHeight, width: playerButtonWidth);
    // Tex tex = Tex(r' blacktriangleright ', color: BLACK);
    // tex.scaleUniformly(0.5);
    playShape = Triangle(color: GREEN);
    playShape
      ..scale(Vector3(0.16, 0.16, 1))
      ..rotate(PI / 2);
    playShape..shift(DOWN / 4);
    VGroup playGMMButtonGroup = VGroup([playShape, r2]);
    playGMMButtonGroup
      ..toCorner(corner: UL)
      ..shift(Vector3(playerButtonOffset + mainButtonsLeftOffset,
          mainButtonsTopOffset, 0.0));

    Button playButton =
        Button(mob: playGMMButtonGroup, onClick: playGMMUpdater);
    return playButton;
  }

  // Button pauseGMMButton() {
  //   Rectangle r2 = makePlayerButton();

  //   Square sqr = Square(color: RED);
  //   sqr
  //     ..rotate(PI / 2)
  //     ..scale(Vector3(0.18, 0.18, 1));
  //   // sqr..shift(DOWN / 4);
  //   VGroup pauseGMMButtonGroup = VGroup([sqr, r2]);
  //   pauseGMMButtonGroup
  //     ..toCorner(corner: UL)
  //     ..shift(Vector3(playerButtonOffset + mainButtonsLeftOffset, mainButtonsTopOffset, 0.0));

  //   Button pauseButton = Button(mob: pauseGMMButtonGroup, onClick: stopUpdater);
  //   return pauseButton;
  // }

  Button makePrevGMMButton() {
    // Mobject obj = RoundedRectangle(cornerRadius: 0.5, height: 2.0, width: 4.0);
    // Mobject obj = RoundedRectangle(cornerRadius: 0.5);
    // RoundedRectangle r = RoundedRectangle(cornerRadius: 0.3, height: 1.0, width: 2.0);
    Rectangle r2 = makePlayerButton();

    MathTex tex = MathTex(r'\gets');
    tex.scaleUniformly(1.0);
    VGroup prevIterationButton = VGroup([tex, r2]);
    prevIterationButton
      ..toCorner(corner: UL)
      ..shift(Vector3(mainButtonsLeftOffset, mainButtonsTopOffset, 0.0));

    Button prev = Button(mob: prevIterationButton, onClick: prevGMMUpdater);
    return prev;
  }

  Button makeUpdateGMMButton() {
    // Mobject obj = RoundedRectangle(cornerRadius: 0.5, height: 2.0, width: 4.0);
    // Mobject obj = RoundedRectangle(cornerRadius: 0.5);
    // RoundedRectangle r = RoundedRectangle(cornerRadius: 0.3, height: 1.0, width: 2.0);
    Rectangle r2 = makePlayerButton();

    MathTex tex = MathTex(r'\to');
    tex.scaleUniformly(1.0);
    VGroup nextIterationButton = VGroup([tex, r2]);
    nextIterationButton
      ..toCorner(corner: UL)
      ..shift(Vector3(playerButtonOffset * 2 + mainButtonsLeftOffset,
          mainButtonsTopOffset, 0.0));

    Button next = Button(mob: nextIterationButton, onClick: nextGMMUpdater);
    return next;
  }

  Button makeResetGMMButton() {
    Rectangle r2 = makePlayerButton(height: 0.6, width: 2.8);
    Tex tex = Tex(r'Reset', color: RED);
    tex.scaleUniformly(1.0);
    tex.strokeWidth = 10.0;
    VGroup resetIterationButton = VGroup([tex, r2]);
    resetIterationButton
      ..toCorner(corner: UL)
      ..shift(Vector3(
          0.0 + mainButtonsLeftOffset, mainButtonsTopOffset + 0.8, 0.0));

    Button reset = Button(mob: resetIterationButton, onClick: resetGMMUpdater);
    return reset;
  }

  VGroup createDotsFromData(Axes axesTmp, List<double> data) {
    List<Dot> dots = [];

    var length = data.length;
    for (var i = 0; i < length; i++) {
      Dot dot = Dot(axesTmp.c2p(Vector3(data[i], 0, 0)), color: BLUE);
      dots.add(dot);
    }
    VGroup dotsVG = VGroup(dots);
    return dotsVG;
  }

  VGroup createGMM(List<double> means, List<double> covs, xRange, Axes axesT) {
    List<FunctionGraph> graphs = [];

    var colors = [
      BLUE_E,
      YELLOW,
      ORANGE,
      GREEN_A,
      PURPLE,
      PINK,
      GRAY,
      TEAL_C,
      TEAL_B,
      TEAL_A
    ];
    var length = means.length;
    length = min(length, covs.length);
    length = min(length, covs.length);
    var threshold = 0.3;
    var stepSize = 0.1;

    for (var i = 0; i < length; i++) {
      if (covs[i] < lowerCovsThreshold) {
        covs[i] = lowerCovsThreshold;
      }

      if (covs[i] > upperCovsThreshold + 2) {
        covs[i] = upperCovsThreshold;
      }

      if (covs[i] < 2) {
        stepSize = 0.1;
      } else {
        stepSize = 0.3;
      }

      FunctionGraph graph = axesT.getGraph(
          (x) =>
              (4 / covs[i]) *
              exp(-(((x - means[i]) * (x - means[i])) /
                  (2 * covs[i] * covs[i]))),
          xMin: means[i] - 3 * covs[i],
          xMax: means[i] + 3 * covs[i],
          color: colors[i],
          stepSize: stepSize);
      graphs.add(graph);
    }
    return VGroup(graphs);
  }

  bool isConverged(List<double> covs) {
    for (var i = 0; i < covs.length; i++) {
      if (covs[i] > lowerCovsThreshold && covs[i] < upperCovsThreshold) {
        return false;
      }
    }
    return true;
  }

  Axes addAxes(List<double> xRange) {
    double stepSize = ((xRange[1] - xRange[0]) / 20).toInt() / 2;
    Axes axesTmp = Axes(
      xMin: xRange[0],
      xMax: xRange[1],
      yMin: -1,
      yMax: 6,
      axisConfig: AxisConfig(
        includeNumbers: true,
        includeTip: true,
      ),
      xAxisConfig: AxisConfig(
        tickFrequency: 1.0,
        unitSize: 0.5,
        includeTip: false,
        // includeNumbers: true,
        // numbersToShow: range(start: 1, end: (xRange[1] - xRange[0]).toInt()),
        // labelDirection: DOWN
      ),
      yAxisConfig: AxisConfig(
        unitSize: 0.7,
      ),
    )
      ..setColor(color: WHITE)
      ..toCorner(corner: DL);

    // TODO Add labels

    return axesTmp;
  }

  // Create Animations
  Animation createInitialGMMAnimations(VGroup gaussians) {
    return ShowCreation(gaussians);
  }

  Future animateData1D(VGroup dots, VGroup dots2) async {
    await play(Transform(dots, target: dots2));
  }

  // Animates the Gaussian Functions given the initial and target gaussians
  Future animateGaussians(VGroup currentGMM, VGroup gaussians2) async {
    await play(
        Transform(currentGMM, target: gaussians2, lagRatio: 1, runTime: 2));
  }

  void transformGaussians() async {
    // await play(Transform(currentGMM, target: nextGMM)); // YIPEEEE
    currentGMM.become(nextGMM);
  }

  Map makeMap() {
    Map m = {
      "e": Tex('e'),
      "+": Tex('+'),
      "-": Tex('-'),
      ".": Tex('.'),
      "0": Tex('0'),
      "1": Tex('1'),
      "2": Tex('2'),
      "3": Tex('3'),
      "4": Tex('4'),
      "5": Tex('5'),
      "6": Tex('6'),
      "7": Tex('7'),
      "8": Tex('8'),
      "9": Tex('9'),
    };
    return m;
  }

  VGroup initializeListDisplay(List<double> list, {double heightOffset: 0.0}) {
    int length = list.length;
    List<VGroup> vgs = [];

    for (var i = 0; i < length; i++) {
      VGroup number = VGroup(getNumber(list[i].toStringAsPrecision(2)));
      number
        ..toCorner(corner: UL)
        ..shift(Vector3(mcDisplayLeftOffset + 2.0 + letterOffset * i,
            mcDisplayTopOffset - heightOffset, 0.0));
      vgs.add(number);
    }

    return VGroup(vgs);
  }

  Animation initializeMCDisplay(List<double> means, List<double> covs) {
    VGroup mVG = initializeListDisplay(means);
    VGroup cVG = initializeListDisplay(covs, heightOffset: mcTextOffset);
    mcVG = VGroup([mVG, cVG]);

    return ShowCreation(mcVG);
  }

  Animation transformMCDisplay(List<double> means, List<double> covs) {
    VGroup mVG = initializeListDisplay(means);
    VGroup cVG = initializeListDisplay(covs, heightOffset: mcTextOffset);
    VGroup mcVG2 = VGroup([mVG, cVG]);

    return Transform(mcVG, target: mcVG2);
  }

  AnimationGroup createNumberDisplay(List<double> means, List<double> covs) {
    MathTex meanText = MathTex(r'\textnormal{Means} \hspace{0.1cm} \mu:');
    MathTex varianceText =
        MathTex(r'\textnormal{Variances} \hspace{0.1cm} \sigma^2:');

    meanText
      ..scale(Vector3(0.7, 0.7, 1))
      ..toCorner(corner: UL)
      ..shift(Vector3(mcDisplayLeftOffset, mcDisplayTopOffset, 0.0));

    varianceText
      ..scale(Vector3(0.7, 0.7, 1))
      ..toCorner(corner: UL)
      ..shift(Vector3(mcDisplayLeftOffset, mcDisplayTopOffset - 0.6, 0.0));

    mcSurroundingRectangle = Rectangle(
        color: WHITE, width: 1.75 + letterOffset * numComponents, height: 1.3)
      ..toCorner(corner: UL)
      ..shift(
          Vector3(mcDisplayLeftOffset - 0.3, mcDisplayTopOffset + 0.2, 0.0));
    mcSurroundingRectangle.fillColors = [TRANSPARENT];

    Animation initialMCDisplayAnimation = initializeMCDisplay(means, covs);
    AnimationGroup ag = AnimationGroup([
      ShowCreation(meanText),
      ShowCreation(varianceText),
      initialMCDisplayAnimation,
      ShowCreation(mcSurroundingRectangle)
    ]);
    return ag;
  }

  Button decrementK() {
    Circle circle = Circle();
    Tex minus = m["-"];
    VGroup dK = VGroup([circle, minus]);
    Button dKButton = Button(mob: dK, onClick: () => numComponents -= 1);
    return dKButton;
  }

  AnimationGroup fixedComponentNumberDisplay() {
    MathTex fixedComponentNumber = MathTex(r'N_{components}:');
    VGroup componentNumber;

    fixedComponentNumber
      ..toCorner(corner: UL)
      ..shift(Vector3(fixedComponentNumberDiplayLeftOffset,
          mainButtonsTopOffset + 0.5, 0.0));

    componentNumber = (numComponents < 10)
        ? VGroup([m[numComponents.toString()]])
        : VGroup(getNumber(numComponents.toString(), pos: ORIGIN));
    componentNumber
      ..toCorner(corner: UL)
      ..shift(Vector3(fixedComponentNumberDiplayLeftOffset + 0.5,
          mainButtonsTopOffset, 0.0));

    return AnimationGroup(
        [ShowCreation(fixedComponentNumber), ShowCreation(componentNumber)]);
  }

  List<Tex> getNumber(String tmp, {Vector3 pos: ORIGIN}) {
    List<Tex> t = [];
    bool eFlag = false;
    int sinceE = 0;
    double eFlagNumberShift = 0.07;
    double exponentOffset = 0.07;
    double letterSpacing = 0.17;
    double xShift = 0;
    bool isPeriod = false;
    for (var j = 0; j < tmp.length; j++) {
      bool isNumber = false;
      Tex letter = m[tmp[j]].copy();
      double yShift = 0;

      if (isPeriod) {
        isPeriod = false;
        xShift = 0.08;
      }

      if (tmp[j] == '.') {
        yShift = 0.1;
        xShift = 0.04;
        isPeriod = true;
      } else if (tmp[j] == 'e') {
        yShift = 0.05;
        eFlag = true;
      } else {
        isNumber = true;
      }

      if (eFlag && isNumber) {
        sinceE++;
        letter
          ..scale(Vector3(0.5, 0.5, 1))
          ..moveToPoint(Vector3(
              pos[0] + letterSpacing * j - exponentOffset * sinceE,
              pos[1] + eFlagNumberShift,
              pos[2]));
      } else {
        letter
          ..moveToPoint(Vector3(
              pos[0] - xShift + letterSpacing * j, pos[1] - yShift, pos[2]));
      }

      t.add(letter);
    }

    return t;
  }

  Future animateNumberChange(double a, double b, Vector3 pos, Map map,
      {int steps: 17,
      double runTime: 0.03,
      int digits: 3,
      bool doEnd: true}) async {
    double step = (b - a) / steps;
    List<VGroup> numbers = [];
    double currentNumber = a - step;
    String tmp;
    VGroup initial = VGroup();
    for (var i = 0; i < steps + 1; i++) {
      currentNumber += step;
      tmp = currentNumber.toStringAsPrecision(digits);
      List<Tex> t = getNumber(tmp, pos: pos);
      numbers.add(VGroup(t));

      if (i == 0) {
        initial = numbers[0];
        this.add([initial]);
      } else {
        initial.become(numbers[i]);
        await wait(runTime);
      }
    }

    if (doEnd) {
      this.remove([initial]);
      await wait(runTime);
    }
  }

  Future loadingAnimation() async {
    Circle circle = Circle(radius: 1.0, color: WHITE)
      ..shift(Vector3(0.1, 0.0, 0.0));
    circle.fillColors = [BLACK];
    await play(ShowCreation(circle));
    await animateNumberChange(0, 9, ORIGIN, m,
        steps: 9, digits: 1, runTime: 0.025);
    await animateNumberChange(9, 99, ORIGIN, m,
        steps: 90, digits: 2, runTime: 0.025);

    VGroup v100 = VGroup(getNumber("100"));
    this.add([v100]);
    // await play(ShowCreation(v100));
    await play(FadeOut(circle));
    await play(FadeOut(v100, lagRatio: 2.0));
  }

  // UTILITY
  List<double> initializeWeights(int length) {
    return List.generate(length, (index) => 1 / length);
  }
}
